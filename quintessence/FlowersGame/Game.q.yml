parent_classes:
  - class: AllegroFlare::Screen
    scope: public
    init_with: "{}"
properties:
  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: motion
    type: AllegroFlare::Motion*
    init_with: nullptr
    constructor_arg: true
  - name: showing_title
    type: bool
    init_with: true
  - name: flower_of_interest
    type: Flowers::Flower
    init_with: ""
    getter: true
    setter: true
  - name: mutations
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: flower_history
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: state
    type: std::string
    init_with: "\"undefined\""
  - name: camera_transform
    type: allegro_flare::placement2d
    init_with: "0, 0, 1920, 1080"
  - name: random
    type: AllegroFlare::Random
    init_with: "12345"
  - name: achievements
    type: AllegroFlare::Achievements
    init_with: "{}"
  - name: achieved
    type: std::vector<std::string>
    init_with: "{}"
    getter_ref: true
  - name: selection_time
    type: float
    init_with: 0.0f
    setter: true
  - name: quote_spawner
    type: Flowers::QuoteSpawner
    init_with: "font_bin"
  - name: num_generations
    type: int
    init_with: 0
functions:
  - name: dump_flower_of_interest_stats
    body: |
      Flowers::Flower f = flower_of_interest;
      std::cout << "sat: " << f.calc_petal_color_saturation() << std::endl;
      std::cout << "val: " << f.calc_petal_color_value() << std::endl;


  - name: infer_display
    type: ALLEGRO_DISPLAY*
    body: return al_get_current_display();


  - name: draw_press_enter_text
    body: |
      int display_width = al_get_display_width(infer_display());
      int display_height = al_get_display_height(infer_display());
      ALLEGRO_FONT *font = font_bin->operator[]("Montserrat-Regular.ttf 28");
      ALLEGRO_COLOR color = al_color_html("9bb6d3");
      float line_height = al_get_font_line_height(font);
      std::string title = "Copyright 2020 - Mark Oates";
      al_draw_text(font, color, display_width/2, display_height/2 - line_height/2 + 200, ALLEGRO_ALIGN_CENTER, title.c_str());
      return;
    body_dependency_symbols:
      - al_draw_text
      - al_color_name


  - name: load_achievements
    body: |
      achievements.add("Four Petal Flower", new Flowers::Achievements::FourLeaf(this));
      achievements.add("Peduncle", new Flowers::Achievements::Peduncle(this));
      achievements.add("Saturated Color", new Flowers::Achievements::Saturated(this));
      achievements.add("Dark Petals", new Flowers::Achievements::DarkPetals(this));
      achievements.add("Fast Flower", new Flowers::Achievements::Fast(this));
      return;
    body_dependency_symbols:
      - al_draw_text
      - all_achievements


  - name: start_game
    body: |
      load_achievements();
      num_generations = 0;
      showing_title = false;
      flower_of_interest = Flowers::Flower();
      flower_of_interest.set_created_at(al_get_time());
      return;


  - name: clear_mutations
    body: |
      for (int i=0; i<mutations.size(); i++)
      {
         auto &mutation = mutations[i];
         motion->clear_animations_on(&mutation.get_x_ref());
         motion->clear_animations_on(&mutation.get_y_ref());
      }
      mutations.clear();


  - name: reveal_mutations
    body: |
      float TAU = 3.14159 * 2;
      //int num_mutations = mutations.size();
      float source_flower_x = flower_of_interest.get_x();
      float source_flower_y = flower_of_interest.get_y();

      for (int i=0; i<mutations.size(); i++)
      {
         auto &mutation = mutations[i];
         float delta = (float) i / mutations.size();
         float radius = 300;
         float dest_x = std::sin(delta * TAU) * radius + source_flower_x;
         float dest_y = std::cos(delta * TAU) * radius + source_flower_y;
         float speed = mutation.get_speed_sec();

         motion->cmove_to(&mutation.get_x_ref(), dest_x, speed, AllegroFlare::interpolator::double_fast_in);
         motion->cmove_to(&mutation.get_y_ref(), dest_y, speed, AllegroFlare::interpolator::tripple_fast_in);
      }
      return;
    body_dependency_symbols:
      - cmath


  - name: create_mutations
    body: |
      clear_mutations();

      Flowers::FlowerTransformer mutator(&flower_of_interest, &random);
      mutations = mutator.mutations();

      return;
    body_dependency_symbols:
      - Flowers::FlowerTransformer



  - name: move_camera_to
    parameters:
      - name: dest_x
        type: float
        default_argument: 0.0f
      - name: dest_y
        type: float
        default_argument: 0.0f
    body: |
      motion->cmove_to(&camera_transform.position.x, dest_x, 2.0, AllegroFlare::interpolator::double_fast_in);
      motion->cmove_to(&camera_transform.position.y, dest_y, 2.0, AllegroFlare::interpolator::tripple_fast_in);
      return;


  - name: check_achievements
    body: |
      achievements.check_all();
      return;


  - name: select_mutation
    parameters:
      - name: index
        type: int
        default_argument: 0
    body: |
      if (index < 0 || index >= mutations.size())
      {
         throw std::runtime_error("could not select mutation, index out of bounds");
      }

      // safe the previous flower
      flower_history.push_back(flower_of_interest);

      // set the new flower (and create_time)
      flower_of_interest = mutations[index];
      flower_of_interest.set_created_at(al_get_time());
      flower_of_interest.set_spawned_offspring(false);

      dump_flower_of_interest_stats();

      // move the camera
      move_camera_to(flower_of_interest.get_x(), flower_of_interest.get_y());

      clear_mutations();

      check_achievements();

      num_generations++;

      if (num_generations % 20 == 10) quote_spawner.spawn();

      set_selection_time(al_get_time());

      return;


  - name: draw_achievements
    body: |
      ALLEGRO_FONT *font = font_bin->operator[]("Montserrat-Regular.ttf 22");
      ALLEGRO_COLOR color = al_color_name("gray");
      float line_height = al_get_font_line_height(font);
      int display_width = al_get_display_width(infer_display());
      int display_height = al_get_display_height(infer_display());
      std::vector<std::string> elements = achieved;
      //{ std::string("Four Leaf Clover"), std::string("Saturated"), std::string("Golden Rose") };
      float distance = 200;
      float start_x = display_width/2 - (distance * (elements.size() - 1)) / 2;
      int counter = 0;
      for (auto &ach : elements) //achieved)
      {
         al_draw_text(font, color,
            start_x + distance * counter,
            display_height - 100,
            ALLEGRO_ALIGN_CENTER,
            ach.c_str()
         );
         counter++;
      }
    body_dependency_symbols:
      - al_draw_text


  - name: draw_title
    body: |
      int display_width = al_get_display_width(infer_display());
      int display_height = al_get_display_height(infer_display());
      ALLEGRO_FONT *font = font_bin->operator[]("BodoniFLF-Roman.ttf 190");
      //7c3658
      //344b6d
      ALLEGRO_COLOR color = al_color_html("344b6d");
      //ALLEGRO_COLOR color = al_color_html("7c3658");
      float line_height = al_get_font_line_height(font);
      std::string title = "f  l  o  w  e  r  s";
      al_draw_text(font, color, display_width/2, display_height/2 - line_height/2, ALLEGRO_ALIGN_CENTER, title.c_str());

      draw_press_enter_text();
    body_dependency_symbols:
      - al_draw_text
      - al_color_name


  - name: draw_gameplay
    type: void
    body: |
      // draw flower of focus

      //allegro_flare::placement2d camera_transform(0, 0, 1920, 1080);
      camera_transform.align = AllegroFlare::vec2d(0.5, 0.5);
      camera_transform.start_reverse_transform();

      // draw flower history

      for (auto &flower : flower_history)
      {
         allegro_flare::placement2d flower_transform(flower.get_x(), flower.get_y(), 0, 0);
         flower_transform.start_transform();
         Flowers::FlowerRenderer(&flower).render();
         flower_transform.restore_transform();
      }

      // draw flower of interest

      allegro_flare::placement2d flower_transform(flower_of_interest.get_x(), flower_of_interest.get_y(), 0, 0);
      flower_transform.start_transform();
      Flowers::FlowerRenderer(&flower_of_interest, true).render();
      flower_transform.restore_transform();

      // draw mutations

      int mutation_num = 0;
      for (auto &flower : mutations)
      {
         allegro_flare::placement2d flower_transform(flower.get_x(), flower.get_y(), 0, 0);
         flower_transform.start_transform();
         Flowers::FlowerRenderer(&flower).render();

         // draw keyboard input
         ALLEGRO_FONT *font = font_bin->operator[]("Montserrat-Regular.ttf 22");
         ALLEGRO_COLOR color = al_color_html("344b6d");
         std::stringstream selection_input;
         selection_input << (char)(mutation_num + 1 + 64);
         al_draw_text(font, color, 0, 20, ALLEGRO_ALIGN_CENTER, selection_input.str().c_str());

         flower_transform.restore_transform();

         mutation_num++;
      }

      camera_transform.restore_transform();

      // draw quote

      allegro_flare::placement2d quote_transform(al_get_display_width(infer_display())/2,
          al_get_display_height(infer_display())-50, 0, 0);
      quote_transform.start_transform();
      quote_spawner.draw();
      quote_transform.restore_transform();

      // draw achievements

      draw_achievements();

      return;
    body_dependency_symbols:
      - Flowers::FlowerRenderer
      - allegro_flare::placement2d
      - al_draw_text


  - name: key_char_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      char char_pressed = ev->keyboard.unichar;
      return;


  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch(ev->keyboard.keycode)
      {
      case ALLEGRO_KEY_ESCAPE:
         framework->shutdown_program = true;
         break;
      case ALLEGRO_KEY_ENTER:
         start_game();
         break;
      case ALLEGRO_KEY_M:
         //if (mutations.empty())
         //{
            //create_mutations();
            //reveal_mutations();
         //}
         break;
      case ALLEGRO_KEY_A:
         if (mutations.size() >= 1) select_mutation(0);
         break;
      case ALLEGRO_KEY_B:
         if (mutations.size() >= 2) select_mutation(1);
         break;
      case ALLEGRO_KEY_C:
         if (mutations.size() >= 3) select_mutation(2);
         break;
      case ALLEGRO_KEY_D:
         if (mutations.size() >= 4) select_mutation(3);
         break;
      case ALLEGRO_KEY_E:
         if (mutations.size() >= 5) select_mutation(4);
         break;
      case ALLEGRO_KEY_F:
         if (mutations.size() >= 6) select_mutation(5);
         break;
      case ALLEGRO_KEY_G:
         if (mutations.size() >= 7) select_mutation(6);
         break;
      case ALLEGRO_KEY_H:
         if (mutations.size() >= 8) select_mutation(7);
         break;
      }
      return;


  - name: primary_timer_func
    override: true
    type: void
    body: |
      ALLEGRO_COLOR background_color = al_color_html("c6dee7");
      al_clear_to_color(background_color);

      check_achievements();
      quote_spawner.update();
      quote_spawner.cleanup();

      if (flower_of_interest.calc_offspring_duration() > flower_of_interest.get_speed_sec()
         && !flower_of_interest.get_spawned_offspring())
      {
         flower_of_interest.set_spawned_offspring(true);
         create_mutations();
         reveal_mutations();
      }

      if (showing_title) draw_title();
      else draw_gameplay();

      return;
    body_dependency_symbols:
      - al_clear_to_color


dependencies:
  - symbol: cmath
    headers: [ cmath ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Achievements
    headers: [ AllegroFlare/Achievements.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Motion*
    headers: [ AllegroFlare/Motion.hpp ]
  - symbol: Flowers::FlowerRenderer
    headers: [ Flowers/FlowerRenderer.hpp ]
  - symbol: Flowers::FlowerTransformer
    headers: [ Flowers/FlowerTransformer.hpp ]
  - symbol: Flowers::QuoteSpawner
    headers: [ Flowers/QuoteSpawner.hpp ]
  - symbol: Flowers::Flower
    headers: [ Flowers/Flower.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: std::vector<std::pair<char, Flowers::Flower>>
    headers: [ vector, utility, Flowers/Flower.hpp ]
  - symbol: std::vector<Flowers::Flower>
    headers: [ vector, Flowers/Flower.hpp ]
  - symbol: all_achievements
    headers:
      - Flowers/Achievements/FourLeaf.hpp
      - Flowers/Achievements/Peduncle.hpp
      - Flowers/Achievements/Saturated.hpp
      - Flowers/Achievements/DarkPetals.hpp
      - Flowers/Achievements/Fast.hpp
