parent_classes:
  - class: AllegroFlare::Screen
    scope: public
    init_with: "{}"
properties:
  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: motion
    type: AllegroFlare::Motion*
    init_with: nullptr
    constructor_arg: true
  - name: showing_title
    type: bool
    init_with: true
  - name: flower_of_interest
    type: Flowers::Flower
    init_with: ""
  - name: mutations
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: flower_history
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: state
    type: std::string
    init_with: "\"undefined\""
functions:


  - name: infer_display
    type: ALLEGRO_DISPLAY*
    body: return al_get_current_display();


  - name: draw_press_enter_text
    body: |
      int display_width = al_get_display_width(infer_display());
      int display_height = al_get_display_height(infer_display());
      ALLEGRO_FONT *font = font_bin->operator[]("Montserrat-Regular.ttf 28");
      ALLEGRO_COLOR color = al_color_html("9bb6d3");
      float line_height = al_get_font_line_height(font);
      std::string title = "Copyright 2020 - Mark Oates";
      al_draw_text(font, color, display_width/2, display_height/2 - line_height/2 + 200, ALLEGRO_ALIGN_CENTER, title.c_str());
      return;
    body_dependency_symbols:
      - al_draw_text
      - al_color_name


  - name: start_game
    body: |
      showing_title = false;
      return;


  - name: clear_mutations
    body: |
      for (int i=0; i<mutations.size(); i++)
      {
         auto &mutation = mutations[i];
         motion->clear_animations_on(&mutation.get_x_ref());
         motion->clear_animations_on(&mutation.get_y_ref());
      }
      mutations.clear();


  - name: reveal_mutations
    body: |
      float TAU = 3.14159 * 2;
      //int num_mutations = mutations.size();
      for (int i=0; i<mutations.size(); i++)
      {
         auto &mutation = mutations[i];
         float delta = (float) i / mutations.size();
         float radius = 300;
         float dest_x = std::sin(delta * TAU) * radius;
         float dest_y = std::cos(delta * TAU) * radius;

         motion->cmove_to(&mutation.get_x_ref(), dest_x, 2.0, AllegroFlare::interpolator::double_fast_in);
         motion->cmove_to(&mutation.get_y_ref(), dest_y, 2.0, AllegroFlare::interpolator::tripple_fast_in);
      }
      return;
    body_dependency_symbols:
      - cmath


  - name: create_mutations
    body: |
      clear_mutations();

      Flowers::FlowerTransformer mutator(&flower_of_interest);
      mutations = mutator.mutations();

      return;
    body_dependency_symbols:
      - Flowers::FlowerTransformer


  - name: select_mutation
    parameters:
      - name: index
        type: int
        default_argument: 0
    body: |
      if (index < 0 || index >= mutations.size())
      {
         throw std::runtime_error("could not select mutation, index out of bounds");
      }

      flower_history.push_back(flower_of_interest);
      flower_of_interest = mutations[index];
      return;


  - name: draw_title
    body: |
      int display_width = al_get_display_width(infer_display());
      int display_height = al_get_display_height(infer_display());
      ALLEGRO_FONT *font = font_bin->operator[]("BodoniFLF-Roman.ttf 190");
      //7c3658
      //344b6d
      ALLEGRO_COLOR color = al_color_html("344b6d");
      //ALLEGRO_COLOR color = al_color_html("7c3658");
      float line_height = al_get_font_line_height(font);
      std::string title = "f  l  o  w  e  r  s";
      al_draw_text(font, color, display_width/2, display_height/2 - line_height/2, ALLEGRO_ALIGN_CENTER, title.c_str());

      draw_press_enter_text();
    body_dependency_symbols:
      - al_draw_text
      - al_color_name


  - name: draw_gameplay
    type: void
    body: |
      // draw flower of focus

      allegro_flare::placement2d camera_transform(0, 0, 1920, 1080);
      camera_transform.align = AllegroFlare::vec2d(0.5, 0.5);
      camera_transform.start_reverse_transform();

      Flowers::FlowerRenderer(&flower_of_interest).render();

      for (auto &mutation : mutations)
      {
         allegro_flare::placement2d flower_transform(mutation.get_x(), mutation.get_y(), 0, 0);
         flower_transform.start_transform();
         Flowers::FlowerRenderer(&mutation).render();
         flower_transform.restore_transform();
      }

      camera_transform.restore_transform();

      return;
    body_dependency_symbols:
      - Flowers::FlowerRenderer
      - allegro_flare::placement2d


  - name: key_char_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch(ev->keyboard.keycode)
      {
      }
      return;

  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch(ev->keyboard.keycode)
      {
      case ALLEGRO_KEY_ESCAPE:
         framework->shutdown_program = true;
         break;
      case ALLEGRO_KEY_ENTER:
         start_game();
         break;
      case ALLEGRO_KEY_M:
         if (mutations.empty())
         {
            create_mutations();
            reveal_mutations();
         }
         break;
      }
      return;


  - name: primary_timer_func
    override: true
    type: void
    body: |
      ALLEGRO_COLOR background_color = al_color_html("c6dee7");
      al_clear_to_color(background_color);

      if (showing_title) draw_title();
      else draw_gameplay();

      return;
    body_dependency_symbols:
      - al_clear_to_color


dependencies:
  - symbol: cmath
    headers: [ cmath ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Motion*
    headers: [ AllegroFlare/Motion.hpp ]
  - symbol: Flowers::FlowerRenderer
    headers: [ Flowers/FlowerRenderer.hpp ]
  - symbol: Flowers::FlowerTransformer
    headers: [ Flowers/FlowerTransformer.hpp ]
  - symbol: Flowers::Flower
    headers: [ Flowers/Flower.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: std::vector<Flowers::Flower>
    headers: [ vector, Flowers/Flower.hpp ]
