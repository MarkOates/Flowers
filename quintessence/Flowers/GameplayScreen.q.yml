parent_classes:
  - class: AllegroFlare::Screen
    scope: public
    init_with: "{}"
properties:
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: flowers
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: large_text_scrollers
    type: std::vector<Flowers::LargeTextScroller>
    init_with: "{}"
  - name: screen_width
    type: int
    init_with: 1920
    constructor_arg: true
  - name: screen_height
    type: int
    init_with: 1080
    constructor_arg: true
  - name: gameboard_width
    type: int
    init_with: (1920 * 0.6)
  - name: gameboard_height
    type: int
    init_with: (1080 * 0.5)
functions:
  - name: spawn_initial_flowers
    type: void
    body: |
      int num_columns = 6;
      int num_rows = 4;

      float cell_width = (float)gameboard_width / num_columns;
      float cell_height = (float)gameboard_height / num_rows;

      Flowers::FlowerGenerator flower_generator;

      for (unsigned y=0; y<num_rows; y++)
      {
         for (unsigned x=0; x<num_columns; x++)
         {
            Flowers::Flower flower = flower_generator.generate_random_flower();

            flower.set_x(cell_width * x + cell_width * 0.5);
            flower.set_y(cell_height * y + cell_height * 0.5);

            flowers.push_back(flower);
         }
      }
      return;
    body_dependency_symbols:
      - Flowers::FlowerGenerator
  - name: initialize
    type: void
    body: |
      spawn_initial_flowers();
      return;
  - name: primary_timer_func
    override: true
    body: |
      // update

      for (auto &large_text_scroller : large_text_scrollers)
      {
         large_text_scroller.increment_by_step();
      }
      for (auto &flower : flowers)
      {
         Flowers::FlowerUpdater updater(&flower);
         updater.update();
      }


      // draw

      allegro_flare::placement2d place(screen_width/2, screen_height/2, gameboard_width, gameboard_height);
      place.align = AllegroFlare::vec2d(0.5, 0.5);
      place.start_transform();

      al_draw_rectangle(0, 0, gameboard_width, gameboard_height, al_color_name("saddlebrown"), 3.0);

      for (auto &flower : flowers)
      {
         allegro_flare::placement2d flower_placement(flower.get_x(), flower.get_y(), 0, 0);
         flower_placement.start_transform();
         Flowers::FlowerRenderer renderer(&flower);
         renderer.render();
         flower_placement.restore_transform();
      }

      place.restore_transform();
      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - al_color_name
      - allegro_flare::placement2d
      - Flowers::FlowerUpdater
      - Flowers::FlowerRenderer
dependencies:
  - symbol: std::vector<Flowers::Flower>
    headers: [ vector, Flowers/Flower.hpp ]
  - symbol: std::vector<Flowers::LargeTextScroller>
    headers: [ vector, Flowers/LargeTextScroller.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: Flowers::FlowerUpdater
    headers: [ Flowers/FlowerUpdater.hpp ]
  - symbol: Flowers::FlowerRenderer
    headers: [ Flowers/FlowerRenderer.hpp ]
  - symbol: Flowers::FlowerGenerator
    headers: [ Flowers/FlowerGenerator.hpp ]
