parent_classes:
  - class: AllegroFlare::Screen
    scope: public
    init_with: "{}"
properties:
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: flowers
    type: std::vector<Flowers::Flower>
    init_with: "{}"
  - name: large_text_scrollers
    type: std::vector<Flowers::LargeTextScroller>
    init_with: "{}"
  - name: screen_width
    type: int
    init_with: 1920
    constructor_arg: true
  - name: screen_height
    type: int
    init_with: 1080
    constructor_arg: true
  - name: gameboard_width
    type: int
    init_with: (1920 * 0.6)
  - name: gameboard_height
    type: int
    init_with: (1080 * 0.5)
  - name: quote_generator
    type: Flowers::QuoteGenerator
    init_with: "{}"
  - name: gameboard
    type: Flowers::Gameboard
    init_with: "{}"
functions:
  - name: spawn_quote
    body: |
      if (!font_bin) throw std::runtime_error("Flowers/GameplayScreen::spawn_quote: error: font_bin is a nullptr");

      //ALLEGRO_COLOR background_color = al_color_html("c6dee7");
      ALLEGRO_FONT *quote_font = font_bin->operator[]("Voga-Medium.otf 32");
      std::pair<std::string, std::string> quote = quote_generator.generate_quote();
      Flowers::LargeTextRenderer large_text_renderer(quote_font, quote.first);
      Flowers::LargeTextScroller large_text_scroller(large_text_renderer.create_bitmap());
      large_text_scrollers.push_back(large_text_scroller);
    body_dependency_symbols:
      - Flowers::LargeTextRenderer
  - name: initialize
    type: void
    body: |
      gameboard.spawn_initial_flowers();
      return;
  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch(ev->keyboard.keycode)
      {
      case ALLEGRO_KEY_1:
         spawn_quote();
         break;
      case ALLEGRO_KEY_UP:
         gameboard.move_cursor_up();
         break;
      case ALLEGRO_KEY_DOWN:
         gameboard.move_cursor_down();
         break;
      case ALLEGRO_KEY_RIGHT:
         gameboard.move_cursor_right();
         break;
      case ALLEGRO_KEY_LEFT:
         gameboard.move_cursor_left();
         break;
      case ALLEGRO_KEY_ENTER:
         gameboard.pick_flower();
         break;
      default:
         break;
      }
      return;
  - name: primary_timer_func
    override: true
    body: |
      ALLEGRO_COLOR deep_green = al_color_html("004e2c");
      ALLEGRO_COLOR light_blue = al_color_html("c6dee7");
      ALLEGRO_COLOR background_color = deep_green;
      al_clear_to_color(background_color);

      // update

      for (auto &large_text_scroller : large_text_scrollers)
      {
         large_text_scroller.increment_by_step();
      }
      for (auto &flower : flowers)
      {
         Flowers::FlowerUpdater updater(&flower);
         updater.update();
      }


      // draw

      allegro_flare::placement2d place(screen_width/2, screen_height/2, gameboard_width, gameboard_height);
      place.align = AllegroFlare::vec2d(0.5, 0.5);
      place.start_transform();

      Flowers::GameboardRenderer gameboard_renderer(&gameboard);
      gameboard_renderer.render();

      for (auto &large_text_scroller : large_text_scrollers)
      {
         large_text_scroller.draw();
      }

      place.restore_transform();


      // cleanup

      for (int i=0; i<large_text_scrollers.size(); i++)
      {
         Flowers::LargeTextScroller &large_text_scroller = large_text_scrollers[i];
         if (large_text_scroller.get_finished())
         {
            al_destroy_bitmap(large_text_scroller.get_bitmap());
            large_text_scrollers.erase(large_text_scrollers.begin() + i);
            i--;
         }
      }
      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - al_color_name
      - allegro_flare::placement2d
      - Flowers::FlowerUpdater
      - Flowers::FlowerRenderer
      - Flowers::GameboardRenderer
dependencies:
  - symbol: Flowers::Gameboard
    headers: [ Flowers/Gameboard.hpp ]
  - symbol: std::vector<Flowers::Flower>
    headers: [ vector, Flowers/Flower.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: std::vector<Flowers::LargeTextScroller>
    headers: [ vector, Flowers/LargeTextScroller.hpp ]
  - symbol: Flowers::LargeTextRenderer
    headers: [ Flowers/LargeTextRenderer.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: Flowers::FlowerUpdater
    headers: [ Flowers/FlowerUpdater.hpp ]
  - symbol: Flowers::FlowerRenderer
    headers: [ Flowers/FlowerRenderer.hpp ]
  - symbol: Flowers::FlowerGenerator
    headers: [ Flowers/FlowerGenerator.hpp ]
  - symbol: Flowers::GameboardRenderer
    headers: [ Flowers/GameboardRenderer.hpp ]
  - symbol: Flowers::QuoteGenerator
    headers: [ Flowers/QuoteGenerator.hpp ]
