properties:
  - name: flower
    type: Flowers::Flower*
    init_with: nullptr
    constructor_arg: true
  - name: render_timer
    type: bool
    init_with: false
    constructor_arg: true
  - name: outline_thickness
    type: float
    init_with: 4.0f
  - name: outline_color
    type: ALLEGRO_COLOR
    init_with: "al_color_name(\"purple\")"
  - name: TAU
    type: float
    init_with: 6.283f
functions:
  - name: render_time_arc
    guards: [ flower ]
    type: void
    body: |
      float arc_radius = 100.0f;
      float arc_thickness = 5.0f;
      ALLEGRO_COLOR arc_color = al_color_html("9bb6d3");
      float TAU = 3.14159 * 2;

      float time_now = al_get_time();
      float created_at_time = flower->get_created_at();
      float meter_length = (time_now - created_at_time) / flower->get_speed_sec();

      al_draw_arc(0, 0, arc_radius, TAU * 0.25, TAU * meter_length, arc_color, arc_thickness);
    body_dependency_symbols:
      - al_draw_arc

  - name: render_petals
    type: void
    body: |
      float petal_radius = 10.0f;
      float anchor_x = 0;
      float anchor_y = flower->calculate_receptacle_y();
      float petal_distance_from_center = 20.0f;
      ALLEGRO_COLOR petal_color = flower->get_petal_color();
      for (int i=0; i<flower->get_num_petals(); i++)
      {
         float rotation = (float)i / flower->get_num_petals();
         float x = anchor_x + std::sin(rotation * TAU) * petal_distance_from_center;
         float y = anchor_y + std::cos(rotation * TAU) * petal_distance_from_center;
         al_draw_filled_circle(x, -y, petal_radius, petal_color);
      }
      return;
    body_dependency_symbols:
      - std::sin
      - std::cos
  - name: render_pistil
    type: void
    body: |
      float receptacle_y = flower->calculate_receptacle_y();
      float y = receptacle_y;
      float stigma_radius = 10.0f;
      ALLEGRO_COLOR pistil_color = flower->get_pistil_color();

      al_draw_filled_circle(0, -y, stigma_radius, pistil_color);
      //al_draw_circle(0, -y, stigma_radius, outline_color, outline_thickness);
      return;
    type: void
  - name: render_peduncle
    type: void
    body: |
      float peduncle_height = flower->get_peduncle_height();
      float peduncle_thickness = flower->get_peduncle_thickness();
      ALLEGRO_COLOR peduncle_color = al_color_name("green");

      al_draw_line(0, 0, 0, -peduncle_height, peduncle_color, peduncle_thickness);
      return;
  - name: render_null_flower
    type: void
    body: |
      ALLEGRO_COLOR null_flower_placeholder_color{64, 64, 64, 64};
      al_draw_filled_circle(0, 0, 10.0f, null_flower_placeholder_color);
  - name: render
    type: void
    body: |
      if (!flower) throw std::runtime_error("[Flower::FlowerRenderer.render() error]: You must pass a valid flower");
      //if (!al_is_primitives_addon_initialized())
      //   throw std::runtime_error("[Flower::FlowerRenderer.render() error]: You must al_init_primitives_addon()");

      if (flower->get_null_object())
      {
         render_null_flower();
      }
      else
      {
         render_peduncle();
         render_petals();
         render_pistil();
         if (render_timer) render_time_arc();
      }

      return;
    body_dependency_symbols:
      - std::runtime_error
      - al_draw_line
      - al_draw_filled_circle
      - al_color_name
dependencies:
  - symbol: std::sin
    headers: [ cmath ]
  - symbol: std::cos
    headers: [ cmath ]
  - symbol: std::runtime_error
    headers: [ stdexcept ]
  - symbol: Flowers::Flower*
    headers: [ Flowers/Flower.hpp ]
  - symbol: al_draw_arc
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_filled_circle
    headers: [ allegro5/allegro_primitives.h ]
