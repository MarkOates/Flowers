properties:
  - name: source_flower
    type: Flowers::Flower*
    init_with: nullptr
    constructor_arg: true
  - name: random
    type: AllegroFlare::Random*
    init_with: nullptr
    constructor_arg: true
functions:
  - name: mutation
    type: Flowers::Flower
    body: |
      Flowers::Flower flower = *source_flower;

      // height
      flower.set_peduncle_height(flower.get_peduncle_height() * random->get_random_float(0.7f, 1.24f));

      // pedal color
      ALLEGRO_COLOR original_color = flower.get_petal_color();
      ALLEGRO_COLOR variance_color = random->get_random_color();
      float mix_ratio = 0.9;
      ALLEGRO_COLOR mix = AllegroFlare::color::mix(original_color, variance_color, mix_ratio);
      flower.set_petal_color(mix);

      return flower;
    body_dependency_symbols:
      - all

  - name: mutations
    type: std::vector<Flowers::Flower>
    body: |
      int number_of_mutations = random->get_random_int(3, 7);
      std::vector<Flowers::Flower> results = {};

      for (int i=0; i<number_of_mutations; i++)
      {
         results.push_back(mutation());
      }
      return results;

dependencies:
  - symbol: all
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_map_rgb
    headers: [ allegro5/allegro.h ]
  - symbol: Flowers::Flower
    headers: [ Flowers/Flower.hpp ]
  - symbol: AllegroFlare::Random*
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: Flowers::Flower*
    headers: [ Flowers/Flower.hpp ]
  - symbol: std::vector<Flowers::Flower>
    headers: [ vector, Flowers/Flower.hpp ]
